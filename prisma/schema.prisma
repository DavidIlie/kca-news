datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  isAdmin            Boolean @default(false)

  articles      Article[]
  comments      Comment[]
  upvotes       Upvote[]
  downvotes     Downvote[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id            String    @id @default(uuid())
  writer        String
  user          Account   @relation(fields: [writer], references: [id], onDelete: Cascade)
  comments      Comment[]
  title         String
  createdAt     DateTime  @default(now())
  lastUpdated   DateTime
  upvotes       Upvote[]
  downvotes     Downvote[]
  pdf           String
}

model Comment {
  id            String    @id @default(uuid())
  userId        String
  user          Account   @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId     String
  article       Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
}

model Upvote {
  id            String   @id @default(uuid())
  articleId     String
  article       Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  votedBy       String
  user          Account  @relation(fields: [votedBy], references: [id], onDelete: Cascade)
}

model Downvote {
  id            String   @id @default(uuid())
  articleId     String
  article       Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  votedBy       String
  user          Account  @relation(fields: [votedBy], references: [id], onDelete: Cascade)
}