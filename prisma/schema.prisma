datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  sessions      Session[]
  accounts      Account[]

  comments      Comment[]
  upvotes       Upvote[]
  downvotes     Downvote[]
  articles      Article[] @relation("writer")
  coArticles    Article[] @relation("coWriter")

  description   String?
  status        String?
  nickname      String?
  tags          String[]

  isAdmin       Boolean @default(false)
  isWriter      Boolean @default(false)
  isReviewer    Boolean @default(false)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id            String    @id @default(uuid())
  user          String?
  writer        User?     @relation("writer", fields: [user], references: [id], onDelete: Cascade)
  coWriters     User[]    @relation("coWriter", references: [id])
  anonymous     Boolean   @default(false)
  comments      Comment[]
  title         String
  createdAt     DateTime  @default(now())
  upvotes       Upvote[]
  downvotes     Downvote[]
  mdx           String
  review        Boolean   @default(false)
  cover         String
  description   String
  published     Boolean   @default(false)
  categoryId    String[]
  filter        String[]
  underReview   Boolean   @default(false)
}

model Comment {
  id            String    @id @default(uuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  articleId     String
  article       Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  comment       String
}

model Upvote {
  id            String   @id @default(uuid())
  articleId     String
  article       Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  votedBy       String
  user          User     @relation(fields: [votedBy], references: [id], onDelete: Cascade)
}

model Downvote {
  id            String   @id @default(uuid())
  articleId     String
  article       Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  votedBy       String
  user          User     @relation(fields: [votedBy], references: [id], onDelete: Cascade)
}